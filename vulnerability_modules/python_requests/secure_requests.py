from vulnerability_tool.framework.resources.types import ResourceType

TEST_NAME = "Python 'verify=False' SSL Vulnerability"
TEST_DESCRIPTION = """
This test checks if the optional argument 'verify' is set to False in the
Python requests module.
Ignoring SSL certificate errors can open the connection to potential
man-in-the-middle attacks. It's better to deal with the certificate errors (if possible) instead.
Sources:
https://stackoverflow.com/questions/12060250/ignore-ssl-certificate-errors-with-java
https://us.norton.com/internetsecurity-how-to-ssl-certificates-what-consumers-need-to-know.html"""

def validate(file, languages_and_libraries, **kwargs):
    if ResourceType.PYTHON_REQUESTS not in languages_and_libraries:
        return (None, None, None, None)

    status = "PASS"
    warning = None
    file_name, file_contents = file
    for line_number, line in enumerate(file_contents, 1):
        if "verify=False" in line:
            status = "WARN"
            warning = "MITM Vulnerability in file: %s, line: %d." % (file_name, line_number)
            break

    return (TEST_NAME, TEST_DESCRIPTION, status, warning)
