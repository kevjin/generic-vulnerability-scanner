from vulnerability_tool.framework.resources.types import ResourceType

TEST_NAME = "Javascript Insecure NPM Packages"
TEST_DESCRIPTION = """
This test makes sure that npm-shrinkwrap is used, if the project has any NPM dependencies.
When 'npm install' is run, NPM prefers to install more recent dependency versions.
It is preferred to lock the dependency, to an audited, secure version.
(Newer dependency versions may have changes that introduce security vulnerabilities.)
Read the Ivan's answer below for why npm-shrinkwrap is better than locking versions in package.json.
Alternatively, switch to Yarn (which has yarn.lock).
Sources:
https://ivanjov.com/what-is-npm-shrinkwrap-and-why-you-should-start-using-it-right-now/
https://yarnpkg.com/lang/en/
https://github.com/Checkmarx/JS-SCP/blob/master/src/general-coding-practices/dependencies.md"""

def validate(file, project_file_paths, **kwargs):
    uses_npm = False
    has_npm_shrinkwrap = False
    for file_path in project_file_paths:
        if "package-lock.json" in file_path:
            uses_npm = True
        if "npm-shrinkwrap.json" in file_path:
            has_npm_shrinkwrap = True
            uses_npm = True
            break

    if not uses_npm:
        return (None, None, None, None)

    if has_npm_shrinkwrap:
        status = "PASS"
        warning = None
    else:
        status = "WARN"
        warning = "Use npm-shrinkwrap to secure dependencies."

    return (TEST_NAME, TEST_DESCRIPTION, status, warning)
