import re
from vulnerability_tool.framework.resources.types import ResourceType

TEST_NAME = "Keys and Passwords in Production Code"
TEST_DESCRIPTION = """
This test checks for any keys or passwords hardcoded in production.
Hopefully your project is not public, but if you ever want to publish it so,
anyone on the Internet would be able to access your keys and passwords,
which can be a huge security risk.
Sources:
https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"""

# Ex. API_KEY = "<insert key here>"
KEY = "KEY(\s*)=(\s*)([\"\'])(.+)([\"\'])"

# Ex. PASSWORD = "<insert password here>"
PASSWORD = "PASSWORD(\s*)=(\s*)([\"\'])(.+)([\"\'])"

def validate(file, languages_and_libraries, **kwargs):
    status = "PASS"
    error = ""
    file_name, file_contents = file

    for line_number, line in enumerate(file_contents, 1):
        match = re.search(KEY, line, re.IGNORECASE) or re.search(PASSWORD, line, re.IGNORECASE)
        if match:
            status = "FAIL"
            error += "Vulnerable key/password in file: %s, line: %d.\n" % (file_name, line_number)

    return (TEST_NAME, TEST_DESCRIPTION, status, error)
