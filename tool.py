import os
import importlib
from framework.helpers import split_by_file_extension
from framework.resources.language_detector import get_language
from framework.resources.library_detector import get_libraries
from framework.resources.types import ResourceType

MODULES_DIR = 'vulnerability_modules'
DEBUG = True

fake_file_name = 'src/header.js'
fake_contents = """
	import React from 'react';let createReactClass = require('create-react-class');//credits to toggle css:
	https://stackoverflow.com/questions/39846282/how-to-add-the-text-on-and-off-to-toggle-buttonlet Header = createReactClass({
	sortIdeas: function() {  dangerouslySetInnerHTML    this.props.sortIdeas();    },    filterTag: function(tag) {this.props.filterTag(tag);    },
"""

def format_file_to_module(file_name):
	# Skip module init files.
	if "__init__" in file_name:
		return None

	# Skip over ".pyc" files.
	if get_language(file_name) != ResourceType.PYTHON:
		return None

	file_name, file_extension = split_by_file_extension(file_name)

	module_name = file_name.replace("/", ".")
	return "%s.%s" % (MODULES_DIR, module_name)


def run_tool(target_file_name, target_file_contents):
	target_file = [target_file_name, target_file_contents]
	module_names = []
	for dir_, _, files in os.walk(MODULES_DIR):
		for file_name in files:
			rel_dir = os.path.relpath(dir_, MODULES_DIR)
			rel_file = os.path.join(rel_dir, file_name)
			module_name = format_file_to_module(rel_file)
			if module_name:
				module_names.append(module_name)

	imported_modules = map(importlib.import_module, module_names)
	passing = True
	detected_libraries = get_libraries(target_file_contents)
	for module in imported_modules:
		passing = module.validate(target_file, detected_libraries, DEBUG) and passing
	if DEBUG and passing:
		print("[DEBUG]: All checks passed successfully.")

	return passing

run_tool(fake_file_name, fake_contents.split("\n"))